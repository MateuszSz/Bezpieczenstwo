<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:tx="http://www.springframework.org/schema/tx"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns="http://www.springframework.org/schema/security"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


    <context:component-scan base-package="controller">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <beans:property name="prefix" value="/jsp/"/>
        <beans:property name="suffix" value=".jsp"/>
    </beans:bean>

    <context:property-placeholder location="classpath*:application.properties"/>

    <beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <beans:property name="driverClassName" value="${database.connection.driver}"/>
        <beans:property name="url" value="${database.connection.url}"/>
        <beans:property name="username" value="${database.user.name}"/>
        <beans:property name="password" value="${database.user.password}"/>
        <beans:property name="validationQuery" value="SELECT 1"/>
    </beans:bean>

    <beans:bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource"/>
        <beans:property name="packagesToScan" value="model.entity"/>
        <beans:property name="hibernateProperties">
            <beans:props>
                <beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</beans:prop>
                <beans:prop key="hibernate.show_sql">${hibernate.show_sql}</beans:prop>
                <beans:prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</beans:prop>
                <beans:prop key="hibernate.connection.url">${database.connection.url}</beans:prop>
                <beans:prop key="hibernate.connection.driver_class">${database.connection.driver}</beans:prop>
            </beans:props>
        </beans:property>
    </beans:bean>


    <beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <beans:property name="sessionFactory" ref="sessionFactory"/>
    </beans:bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <beans:bean id="userPermision" class="model.security.UserPermision"/>
    <beans:bean id="uzytkownikRepository" class="model.repository.UzytkownikRepositoryImp"/>
    <beans:bean id="uzytkownikService" class="model.service.UzytkownikServiceImp"/>


    <beans:bean id="lekRepository" class="model.repository.LekRepositoryImp"/>
    <beans:bean id="lekService" class="model.service.LekServiceImp"/>

    <beans:bean id="ksiazkaRepository" class="model.repository.KsiazkaRepositoryImp"/>
    <beans:bean id="ksiazkaService" class="model.service.KsiazkaServiceImp"/>

    <beans:bean id="dzienPracyRepository" class="model.repository.DzienPracyRepositoryImp"/>
    <beans:bean id="dzienPracyService" class="model.service.DzienPracyServiceImp"/>

    <beans:bean id="ocenaRepository" class="model.repository.OcenaRepositoryImp"/>
    <beans:bean id="ocenaService" class="model.service.OcenaServiceImp"/>

    <beans:bean id="rolaRepository" class="model.repository.RolaRepositoryImp"/>
    <beans:bean id="rolaService" class="model.service.RolaServiceImp"/>

    <beans:bean id="uprawnienieRepository" class="model.repository.UprawnienieRepositoryImp"/>
    <beans:bean id="uprawnienieService" class="model.service.UprawnienieServiceImp"/>


    <beans:bean id="initService" class="model.service.InitServiceImpl"/>

    <beans:bean id="customUsernamePasswordAuthenticationFilter"
                class="model.security.RoleUsernamePasswordAuthenticationFilter">
        <beans:property name="authenticationManager" ref="dao-auth"/>
        <beans:property name="authenticationFailureHandler" ref="failureHandler"/>
        <beans:property name="authenticationSuccessHandler" ref="successHandler"/>
        <beans:property name="sessionAuthenticationStrategy" ref="sas"/>
    </beans:bean>

    <beans:bean id="successHandler"
                class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
        <beans:property name="defaultTargetUrl" value="/index"/>
    </beans:bean>
    <beans:bean id="failureHandler"
                class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <beans:property name="defaultFailureUrl" value="/login?login_error=true"/>
    </beans:bean>

    <beans:bean id="logoutSuccessHandler" class="model.security.CustomLogoutSuccessHandler">
        <beans:constructor-arg value="/wyloguj"/>
    </beans:bean>

    <beans:bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <beans:constructor-arg name="strength" value="11"/>
    </beans:bean>

    <beans:bean id="webExpressionHandler"
                class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler">
        <beans:property name="permissionEvaluator" ref="permissionEvaluator"/>
    </beans:bean>

    <beans:bean id="permissionEvaluator" class="model.security.CustomPermissionEvaluator"/>


    <http auto-config="false" use-expressions="true">
        <expression-handler ref="webExpressionHandler"/>
        <custom-filter before="FORM_LOGIN_FILTER" ref="customUsernamePasswordAuthenticationFilter"/>
        <intercept-url pattern="/login" access="permitAll"/>
        <intercept-url pattern="/favicon.ico" access="permitAll"/>
        <intercept-url pattern="/resources/**" access="permitAll"/>
        <session-management session-authentication-strategy-ref="sas">
        </session-management>
        <intercept-url pattern="/wyloguj" access="permitAll"/>
        <intercept-url pattern="/**"
                       access="hasAnyRole('ADMINISTRATOR','UCZEN','HIGIENISTKA', 'NAUCZYCIEL', 'DYREKTOR', 'BIBLIOTEKARZ')"/>
        <form-login login-page='/login'/>
        <logout logout-url="/logout" success-handler-ref="logoutSuccessHandler"/>
    </http>
    <beans:bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"/>
    <beans:bean id="sas"
                class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
        <beans:constructor-arg ref="sessionRegistry"/>

    </beans:bean>


    <authentication-manager id="dao-auth">
        <authentication-provider user-service-ref="userDetailsService">
            <password-encoder ref="encoder"/>
        </authentication-provider>
    </authentication-manager>
    <beans:bean id="userDetailsService" class="model.security.CustomUserDetailsService"/>
    <beans:bean id="requestContextListener" class="org.springframework.web.context.request.RequestContextListener"/>
    <authentication-manager alias="authenticationManager">
        <authentication-provider>
            <password-encoder ref="encoder"/>
            <jdbc-user-service data-source-ref="dataSource"

                               group-authorities-by-username-query="SELECT rola.id, rola.nazwa, uprawnienie.uprawnienie from rola
                                                                join uzytkownik_rola on uzytkownik_rola.role_id = rola.id
                                                                join uzytkownik on uzytkownik.id = uzytkownik_rola.uzytkownicy_id
                                                                join rola_uprawnienie on rola.id = rola_uprawnienie.Rola_id
                                                                join uprawnienie on uprawnienie.id = rola_uprawnienie.uprawnienia_id
                                                                where uzytkownik.email = ?"


                               authorities-by-username-query="SELECT uzytkownik.email, rola.nazwa, uprawnienie.uprawnienie from uzytkownik
                                                                join uzytkownik_rola on uzytkownik.id = uzytkownik_rola.uzytkownicy_id
                                                                join rola on uzytkownik_rola.role_id = rola.id
                                                                join rola_uprawnienie on rola.id = rola_uprawnienie.Rola_id
                                                                join uprawnienie on uprawnienie.id = rola_uprawnienie.uprawnienia_id
                                                                where uzytkownik.email = ?"
                               users-by-username-query="SELECT uzytkownik.email, uzytkownik.haslo, 1 from uzytkownik where uzytkownik.email = ?"/>

        </authentication-provider>
    </authentication-manager>

</beans:beans>